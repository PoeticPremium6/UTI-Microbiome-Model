#!/bin/bash

# Activate the Conda environment
module load gcc12-env/12.1.0
module load miniconda3/4.12.0
conda activate rnaseq_env

# Add HISAT2 and FeatureCounts to the PATH
export PATH=$PATH:/work_beegfs/sukem113/Software/hisat2-2.1.0

# Define file paths
SAMPLE="A01_mRNA_cdhit"  # Modify for the actual sample name as necessary
CDHIT_INPUT_DIR="/CD-HIT"
CDHIT_INPUT="${CDHIT_INPUT_DIR}/${SAMPLE}"  # Assuming it's a single-end read file
GENOME_DIR="/New_Genomes"
ANNOTATION_DIR="/New_Gene_Annotations"
OUTPUT_DIR="/Alignment_Output"

# Create a separate directory for gene counts
GENE_COUNTS_DIR="${OUTPUT_DIR}/gene_counts"
mkdir -p "$GENE_COUNTS_DIR"  # Create the gene_counts folder if it doesn't exist

# Check if the CD-hit input file exists
if [ ! -f "$CDHIT_INPUT" ]; then
    echo "Error: CD-hit input file not found at $CDHIT_INPUT"
    exit 1
fi

# Loop over all genome index files in the GENOME_DIR
for GENOME_INDEX in "$GENOME_DIR"/*.fna; do

    # Extract the genome name (basename without extension)
    GENOME_NAME=$(basename "$GENOME_INDEX" .fna)

    # Build the annotation file name based on the genome name
    ANNOTATION_FILE="${ANNOTATION_DIR}/${GENOME_NAME}.gff"

    # Debugging: print the annotation file path
    echo "Looking for annotation file: $ANNOTATION_FILE"

    # Check if the annotation file exists
    if [ ! -f "$ANNOTATION_FILE" ]; then
        echo "Warning: Annotation file not found for ${GENOME_NAME}. Skipping this genome."
        continue
    fi

    echo "Processing genome: ${GENOME_NAME}"

    # Build HISAT2 index (if not already created)
    HISAT2_INDEX="${GENOME_DIR}/${GENOME_NAME}"
    if [ ! -f "${HISAT2_INDEX}.1.ht2" ]; then
        echo "HISAT2 index not found for ${GENOME_NAME}. Building index..."
        hisat2-build "$GENOME_INDEX" "$HISAT2_INDEX"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to build HISAT2 index for ${GENOME_NAME}."
            continue
        fi
    fi

    # Run HISAT2 alignment for each genome
    hisat2 -x "$HISAT2_INDEX" -U "$CDHIT_INPUT" -S "${OUTPUT_DIR}/${GENOME_NAME}_${SAMPLE}.sam"
    if [ $? -ne 0 ]; then
        echo "HISAT2 alignment failed for ${GENOME_NAME}."
        continue
    fi

    # Convert SAM to BAM, sort, and index
    samtools view -S -b "${OUTPUT_DIR}/${GENOME_NAME}_${SAMPLE}.sam" > "${OUTPUT_DIR}/${GENOME_NAME}_${SAMPLE}.bam"
    samtools sort "${OUTPUT_DIR}/${GENOME_NAME}_${SAMPLE}.bam" -o "${OUTPUT_DIR}/${GENOME_NAME}_${SAMPLE}_sorted.bam"
    samtools index "${OUTPUT_DIR}/${GENOME_NAME}_${SAMPLE}_sorted.bam"

    # Generate gene-level counts using FeatureCounts
    featureCounts -T 4 -a "$ANNOTATION_FILE" -g "ID" -o "${GENE_COUNTS_DIR}/${GENOME_NAME}_${SAMPLE}_gene_counts.txt" "${OUTPUT_DIR}/${GENOME_NAME}_${SAMPLE}_sorted.bam"
    if [ $? -ne 0 ]; then
        echo "FeatureCounts failed for ${GENOME_NAME}."
        continue
    fi

done

# Deactivate environment
conda deactivate

echo "Gene-level counts generated for all genomes in $GENE_COUNTS_DIR."

##################################
#!/bin/bash

# Set directories
STRINGTIE_DIR="Software/stringtie-2.0.3"
ALIGNMENT_DIR="/Alignment_Output"
ANNOTATION_DIR="/New_Gene_Annotations"
TRANSCRIPTOME_DIR="/New_Transcriptome"
ABUNDANCE_DIR="/New_Gene_Abundance"
GFF_PREFIX="GCF_030812875.1_ASM3081287v1_P_koenoeneniae"
GFF_FILE="${ANNOTATION_DIR}/${GFF_PREFIX}.gff"

# Create output directories if they don't exist
mkdir -p "$TRANSCRIPTOME_DIR" "$ABUNDANCE_DIR"

# Run StringTie for each BAM file
for BAM_FILE in ${ALIGNMENT_DIR}/${GFF_PREFIX}_*_mRNA_cdhit_sorted.bam; do
    SAMPLE_NAME=$(basename "$BAM_FILE" | sed "s/_mRNA_cdhit_sorted.bam//")
    OUTPUT_GFF="${TRANSCRIPTOME_DIR}/${SAMPLE_NAME}.gff"
    OUTPUT_TSV="${ABUNDANCE_DIR}/gene_abundance_${SAMPLE_NAME}.tsv"
    
    "${STRINGTIE_DIR}/stringtie" "$BAM_FILE" -p 8 -G "$GFF_FILE" -e -B -o "$OUTPUT_GFF" -A "$OUTPUT_TSV"
done

# Merge all GFF files into a final transcriptome
GFF_LIST=$(ls ${TRANSCRIPTOME_DIR}/${GFF_PREFIX}_*.gff | tr '\n' ' ')
"${STRINGTIE_DIR}/stringtie" --merge -G "$GFF_FILE" -o "${TRANSCRIPTOME_DIR}/P_koenoeneniae_transcriptome.gff" $GFF_LIST

echo "StringTie processing and merging completed successfully."

