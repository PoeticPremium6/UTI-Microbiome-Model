#Gapseq models need to be conditioned with gene expression data
#To reconstruct context-specific models

# Extract Chromosome start/end & gene count info from E.coli UTI89 transcriptome files
awk '{print $4,$5,$10}' /rUTI/Transcriptome/E.coli_UTI89_Transcriptome.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome0.gtf

# Process the extracted data
awk 'NR>2' /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome0.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome1.gtf
awk '!_[$0]++' /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome1.gtf | sort -t, -nk1,1 > /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome2.gtf

# Since the strain is UTI89, we might not need to filter out its specific references. Adjust if needed for other strains.
grep -v "UTI89" /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome2.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome3.gtf
grep -v "AH4AK4" /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome3.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome4.gtf

# Identify duplicates and clean up
awk 'cnt[$3]++{$3=$3" variant "cnt[$3]-1} 1' /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome4.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome5.gtf
grep -v "variant" /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome5.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/transcriptome_clean.gtf

# Calculating gene length
awk 'BEGIN {OFS="  "} {print $4,$5}' /rUTI/Transcriptome/E.coli_UTI89_Transcriptome.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Gene_Length.gtf
awk 'BEGIN {OFS="  "} {print $2 - $1}' /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Gene_Length.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Gene_Length1.gtf
paste -d'  ' /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Gene_Length.gtf /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Gene_Length1.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Gene_Length2.gtf

# Navigate to your Transcriptome directory for E.coli UTI89
# Sort HTSeq count files to align them properly
# Make sure to replace the file names with your actual E.coli UTI89 count files
sort -V /rUTI/Transcriptome/E.coli_UTI89_1_htseq_counts.out > /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_1_htseq_counts_sorted.out

# Extract gene and count information
awk '{print $1}' /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_1_htseq_counts_sorted.out > /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_genes.gtf

# Repeat the process for counts in all files
for i in {1..5}
do
  awk '{print $2}' /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_"$i"_htseq_counts_sorted.out > /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_counts_"$i".gtf
done

# Merge count files
paste -d';' /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_genes.gtf /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_counts_1.gtf /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_counts_2.gtf /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_counts_3.gtf /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_counts_4.gtf /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_counts_5.gtf > /rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Counts.csv

# Adjust for specific IDs, species info, or other filters as needed for your analysis.
#We need to make sure that our transcriptomes match our microbial metabolic models

module load hdf5
module load R/4.0.0
module load openmpi

# Open R
R

# Define the functions to calculate RPKM and TPM
rpkm <- function(counts, lengths) {
  rate <- counts / lengths 
  rate / sum(counts) * 1e6
}

tpm <- function(counts, lengths) {
  rate <- counts / lengths
  rate / sum(rate) * 1e6
}

# Update paths to the files for E.coli UTI89
genes <- read.table("/rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Gene_Length_Clean.csv", header=TRUE, sep=",")
counts <- read.table("/rUTI/Metabolic_Model/E.coli_UTI89/chromosome_merged_clean.csv", header=TRUE, sep=";")

# Calculate RPKMs and TPMs
rpkms <- apply(counts[, -1], 2, function(x) rpkm(x, genes$Length))
tpms <- apply(counts[, -1], 2, function(x) tpm(x, genes$Length))

# Adjust column names if needed
colnames(rpkms) <- colnames(counts)[-1] # Excludes the first column (gene ID)
colnames(tpms) <- colnames(counts)[-1]

# Output the results to CSV files
write.table(rpkms, "/rUTI/Metabolic_Model/E.coli_UTI89/RPKMs.csv", row.names=TRUE, col.names=NA, sep=";", quote=FALSE)
write.table(tpms, "/rUTI/Metabolic_Model/E.coli_UTI89/TPMS.csv", row.names=TRUE, col.names=NA, sep=";", quote=FALSE)

# Adjust for library paths if needed
library("sybil", lib="rUTI/Software/R_packages/") 
library("data.table", lib="rUTI/Software/R_packages/") 

# Adjust the working directory to where your models are located
setwd("/rUTI/Genomes/GapSeq/Models/out/")

# Ensure you have the E.coli UTI89 model available
Model <- readRDS('E.coli_UTI89.RDS')

# Extract and save the GapSeq Start/Stop information for E.coli UTI89
str_Data <- paste(Model@react_attr$sstart, Model@react_attr$rxn, sep = ";")
str_Data1 <- paste(Model@react_attr$sstart, Model@react_attr$send, sep = "_")
write.table(str_Data, "/rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_GapSeq_Genes.csv", row.names=FALSE, col.names=TRUE, quote=FALSE)
write.table(str_Data1, "/rUTI/Metabolic_Model/E.coli_UTI89/E.coli_UTI89_Chromosome_Matching.csv", row.names=FALSE, col.names=TRUE, quote=FALSE)

# Exit R
quit(save="no")

import cobra
# Replace '/rUTI/Genomes/GapSeq/Models/out/model.sbml' with the actual path to your SBML file
model_path = '/rUTI/Genomes/GapSeq/Models/out/model.sbml'
model = cobra.io.read_sbml_model(model_path)
output_path = '/rUTI/Genomes/GapSeq/Models/out/output_model.mat'
cobra.io.save_matlab_model(model, output_path)

module load git
module load cplex
module load matlab

export ILOG_CPLEX_PATH="/rUTI/Software/cplex"
cd /rUTI/Software/cobratoolbox/
initCobraToolbox(false) % The argument 'false' skips the toolbox update check
changeCobraSolver('ibm_cplex', 'all');

model = readCbModel('/rUTI/Genomes/GapSeq/Models/out/model.mat');

T = readtable('/rUTI/Genomes/GapSeq/Models/out/gene_expression.csv', 'Delimiter', ',');
S5 = struct('gene', {T.gene}, 'value', T.value);

[expressionRxns, parsedGPR] = mapExpressionToReactions(model, S5);

csvwrite('/rUTI/expressionRxns.csv', expressionRxns);
writetable(cell2table(parsedGPR), '/rUTI/GPR_names.csv');

model = readCbModel('/rUTI/Genomes/GapSeq/Models/out/model.mat');

[consistentModel, removedRxns] = makeModelConsistent(model);

saveModel(consistentModel, 'consistentModel.mat');

[expressionRxns, ~] = mapExpressionToReactions(consistentModel, geneExpressionData);

coreRxns = find(expressionRxns > threshold); % Define threshold according to your data
microbialGEM = fastcore(coreRxns, consistentModel);

saveModel(microbialGEM, 'Ecoli_UTI89.mat');

